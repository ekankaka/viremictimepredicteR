# generate the necessary documentation files
document()
library(devtools)
library(usethis)
# generate the necessary documentation files
document()
library(devtools)
document()
document()
build()
install()
library(viremictimepredicteR)
input_fasta = "data/example_GAG_P17.fasta"
# remove reference sequences, if any
fasta_filtered = remove_reference_sequences(input_fasta)
input_fasta = "example_GAG_P17.fasta"
# remove reference sequences, if any
fasta_filtered = remove_reference_sequences(input_fasta)
build()
install()
library(viremictimepredicteR)
input_fasta = "data/example_GAG_P17.fasta"
# remove reference sequences, if any
fasta_filtered = remove_reference_sequences(input_fasta)
# check eligibility
eligibile = check_eligibility(fasta_filtered, 2, 9)
# calculate distance
dist_rawMPD = calculate_distance(fasta_filtered, "rawMPD", 2, 9)
dist_WFPS = calculate_distance(fasta_filtered, "WFPS", 2, 9, 0, c("A","C","G","T","-"))
# predict time since infection
TSI_rawMPD = predict_TSI("Gagp17Matrix", "rawMPD", 0.003)
TSI_WFPS = predict_TSI("Gagp17Matrix", "WFPS", 0.003)
library(devtools)
devtools::install_github("ekankaka/viremictimepredicteR")
devtools::install_github("ekankaka/viremictimepredicteR")
library(viremictimepredicteR)
?check_eligibility
getwd()
usethis::use_readme_md()
?dist.dna
devtools::install_github("ekankaka/viremictimepredicteR")
devtools::install_github("ekankaka/viremictimepredicteR", force = T)
library(viremictimepredicteR)
?calculate_distance
?check_eligibility
